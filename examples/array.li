left = 'left
right = 'right

rest = right.
first = left.

pair = λlra. a ${
	'left  -> l
	'right -> r
}.

arrInit  = λx. pair x ().
arrFirst = λx. x first.
arrRest  = λx. x rest.

arrLen = λx. x ${
	() -> 0
	x -> 1 + (arrLen (x rest))
}.

arrNth = λnx. x ${
	() -> ()
	x -> (n ${
		0 -> (x first)
		n -> (arrNth n-1 (x rest))
	})
}.

arrMap = λfx. x ${
	() -> ()
	x -> (pair (f (x first)) (arrMap f (x rest)))
}.

arrReduce = (λfx. (λl. l ${
	0 -> ()
	1 -> (x first)
	l -> (f (x first) (arrReduce f (x rest)))
})  (arrLen x)).

sum = (arrReduce (+)).
prod = (arrReduce (*)).

range = λse. (s < e) ${
	true  -> (pair s (range s+1 e))
	false -> (s > e) ${
		true  -> (pair s (range s-1 e))
		false -> (arrInit s)
	}
}.

factorial = λx. (x < 0) ${
	true  -> ()
	false -> x ${
		0 -> 1
		x -> (prod (range 1 x))
	}
}.

triangular = λx. (x < 0) ${
	true  -> ()
	false -> (sum (range 0 x))
}.

! (factorial 30)
