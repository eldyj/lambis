rest  = 'rest.
first = 'first.

pair = λlra. a ${
	'first -> l
	'rest  -> r
}.

len = λx. x ${
	() -> 0
	x  -> 1 + (len (x rest))
}.

nth = λnx. x ${
	() -> ()
	x  -> (n ${
		0 -> (x first)
		n -> (nth n-1 (x rest))
	})
}.

map = λfx. x ${
	() -> ()
	x -> (pair (f (x first)) (map f (x rest)))
}.

reduce = (λfx. (λl. l ${
	0 -> ()
	1 -> (x first)
	l -> (f (x first) (reduce f (x rest)))
}) (len x)).

filter = (λfx. x ${
	() -> ()
	x  -> ((λin. [f i] ${
		true  -> (pair i n)
		false -> n
	}) (x first) (filter f (x rest)))
}).

range = (λse. pair s [s < e] ${
	true  -> (range s+1 e)
	false -> [s > e] ${
		true  -> (range s-1 e)
		false -> ()
	}
}).

append = λae. a ${
	() -> (pair e ())
	a -> (pair (a first) (append (a rest) e))
}.

concat = λab. b ${
	() -> a
	b -> (concat (append a (b first)) (b rest))
}.

concat3 = (λabc. concat (concat a b) c).
concat4 = (λabcd. concat (concat3 a b c) d).
concat5 = (λabcde. concat (concat4 a b c d) e).
concat6 = (λabcdef. concat (concat5 a b c d e) f).
concat7 = (λabcdefg. concat (concat6 a b c d e f) g).

reverse = λa. a ${
	() -> ()
	a -> (append (reverse (a rest)) (a first))
}.

sum = (reduce (+)).
prod = (reduce (*)).

positive = (> 0).
negative = (< 0).
zero     = (= 0).
integer  = (λX. {X}=0).
even     = (λx. integer x/2).

map ! (filter even (range 0-10 10))
